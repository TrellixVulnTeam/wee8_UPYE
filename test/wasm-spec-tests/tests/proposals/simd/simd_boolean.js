
'use strict';

let spectest = {
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_f32: 666,
  global_f64: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};
let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(name, instance) {
  return {[name]: instance.exports};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm return value NaN expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// simd_boolean.wast:3
let $1 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7b\x01\x7f\x03\x8a\x80\x80\x80\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x97\x81\x80\x80\x00\x09\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x00\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x0d\x69\x38\x78\x31\x36\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x02\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x03\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x04\x0d\x69\x31\x36\x78\x38\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x05\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x06\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x07\x0d\x69\x33\x32\x78\x34\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x08\x0a\xea\x80\x80\x80\x00\x09\x86\x80\x80\x80\x00\x00\x20\x00\xfd\x62\x0b\x86\x80\x80\x80\x00\x00\x20\x00\xfd\x63\x0b\x86\x80\x80\x80\x00\x00\x20\x00\xfd\x64\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\x82\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\x83\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\x84\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\xa2\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\xa3\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\xfd\xa4\x01\x0b");

// simd_boolean.wast:18
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:20
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:22
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 1)

// simd_boolean.wast:24
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:26
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0f\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("33_620_223 100_992_003 168_364_039 252_513_291")]), 1)

// simd_boolean.wast:28
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:30
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:32
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("-1_414_812_757 -1_414_812_757 -1_414_812_757 -1_414_812_757")]), 1)

// simd_boolean.wast:34
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.any_true", [v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765")]), 1)

// simd_boolean.wast:36
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:38
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("0 0 0 65_536")]), 0)

// simd_boolean.wast:40
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 0)

// simd_boolean.wast:42
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:44
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0f\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("33_620_223 100_992_003 168_364_039 252_513_291")]), 0)

// simd_boolean.wast:46
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:48
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:50
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\xab\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("-1_414_812_757 -1_414_812_757 -1_414_812_757 -1_414_812_757")]), 1)

// simd_boolean.wast:52
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.all_true", [v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765")]), 1)

// simd_boolean.wast:54
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x38\x78\x31\x36\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xab\x80\x80\x80\x00\x01\xa5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\xff\xff\x03\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.bitmask", [v128("-1 -1 -1 -1")]), 65_535)

// simd_boolean.wast:56
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x38\x78\x31\x36\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0f\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i8x16.bitmask", [v128("33_620_223 100_992_003 168_364_039 252_513_291")]), 1)

// simd_boolean.wast:60
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:62
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("0 0 0 1")]), 1)

// simd_boolean.wast:64
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("65_537 65_537 65_537 65_536")]), 1)

// simd_boolean.wast:66
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:68
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\x00\x00\x01\x00\x02\x00\x0b\x00\x0c\x00\x0d\x00\x0f\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("65_535 131_073 786_443 983_053")]), 1)

// simd_boolean.wast:70
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:72
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("16_711_935 16_711_935 16_711_935 16_711_935")]), 1)

// simd_boolean.wast:74
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("11_206_827 11_206_827 11_206_827 11_206_827")]), 1)

// simd_boolean.wast:76
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("5_570_645 5_570_645 5_570_645 5_570_645")]), 1)

// simd_boolean.wast:78
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("809_054_265 809_054_265 809_054_265 809_054_265")]), 1)

// simd_boolean.wast:80
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.any_true", [v128("305_402_420 305_402_420 305_402_420 305_402_420")]), 1)

// simd_boolean.wast:82
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:84
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("0 0 0 1")]), 0)

// simd_boolean.wast:86
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("65_537 65_537 65_537 65_536")]), 0)

// simd_boolean.wast:88
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:90
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\x00\x00\x01\x00\x02\x00\x0b\x00\x0c\x00\x0d\x00\x0f\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("65_535 131_073 786_443 983_053")]), 0)

// simd_boolean.wast:92
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:94
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("16_711_935 16_711_935 16_711_935 16_711_935")]), 1)

// simd_boolean.wast:96
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\xab\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("11_206_827 11_206_827 11_206_827 11_206_827")]), 1)

// simd_boolean.wast:98
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("5_570_645 5_570_645 5_570_645 5_570_645")]), 1)

// simd_boolean.wast:100
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x39\x30\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("809_054_265 809_054_265 809_054_265 809_054_265")]), 1)

// simd_boolean.wast:102
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x31\x36\x78\x38\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.all_true", [v128("305_402_420 305_402_420 305_402_420 305_402_420")]), 1)

// simd_boolean.wast:104
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x31\x36\x78\x38\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xaa\x80\x80\x80\x00\x01\xa4\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\xff\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.bitmask", [v128("-1 -1 -1 -1")]), 255)

// simd_boolean.wast:106
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x31\x36\x78\x38\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\x00\x00\x01\x00\x02\x00\x0b\x00\x0c\x00\x0d\x00\x0f\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i16x8.bitmask", [v128("65_535 131_073 786_443 983_053")]), 1)

// simd_boolean.wast:110
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:112
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("0 0 1 0")]), 1)

// simd_boolean.wast:114
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("1 1 0 1")]), 1)

// simd_boolean.wast:116
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:118
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("-1 0 1 15")]), 1)

// simd_boolean.wast:120
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:122
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("255 255 255 255")]), 1)

// simd_boolean.wast:124
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\x00\x00\x00\xab\x00\x00\x00\xab\x00\x00\x00\xab\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("171 171 171 171")]), 1)

// simd_boolean.wast:126
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("85 85 85 85")]), 1)

// simd_boolean.wast:128
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xd2\x02\x96\x49\xd2\x02\x96\x49\xd2\x02\x96\x49\xd2\x02\x96\x49\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("1_234_567_890 1_234_567_890 1_234_567_890 1_234_567_890")]), 1)

// simd_boolean.wast:130
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6e\x79\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.any_true", [v128("305_419_896 305_419_896 305_419_896 305_419_896")]), 1)

// simd_boolean.wast:132
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:134
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("0 0 1 0")]), 0)

// simd_boolean.wast:136
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("1 1 0 1")]), 0)

// simd_boolean.wast:138
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:140
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("-1 0 1 15")]), 0)

// simd_boolean.wast:142
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:144
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("255 255 255 255")]), 1)

// simd_boolean.wast:146
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xab\x00\x00\x00\xab\x00\x00\x00\xab\x00\x00\x00\xab\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("171 171 171 171")]), 1)

// simd_boolean.wast:148
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("85 85 85 85")]), 1)

// simd_boolean.wast:150
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xd2\x02\x96\x49\xd2\x02\x96\x49\xd2\x02\x96\x49\xd2\x02\x96\x49\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("1_234_567_890 1_234_567_890 1_234_567_890 1_234_567_890")]), 1)

// simd_boolean.wast:152
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x95\x80\x80\x80\x00\x01\x02\x24\x31\x0e\x69\x33\x32\x78\x34\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.all_true", [v128("305_419_896 305_419_896 305_419_896 305_419_896")]), 1)

// simd_boolean.wast:154
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x33\x32\x78\x34\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x0f\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.bitmask", [v128("-1 -1 -1 -1")]), 15)

// simd_boolean.wast:156
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x02\x24\x31\x0d\x69\x33\x32\x78\x34\x2e\x62\x69\x74\x6d\x61\x73\x6b\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "i32x4.bitmask", [v128("-1 0 1 15")]), 1)

// simd_boolean.wast:161
let $2 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x03\x60\x01\x7b\x01\x7f\x60\x02\x7b\x7b\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7f\x03\xc3\x80\x80\x80\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xe5\x90\x80\x80\x00\x42\x19\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x00\x19\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x19\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x02\x19\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x03\x19\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x04\x19\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x05\x1d\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x06\x1d\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x07\x1d\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x08\x1d\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x09\x1d\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x0a\x1d\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x0b\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x0c\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x0d\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x0e\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x0f\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x10\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x11\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x12\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x13\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x14\x20\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x15\x20\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x16\x20\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x17\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x18\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x19\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1a\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1b\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1c\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1d\x20\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1e\x20\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x1f\x20\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x20\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x21\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x22\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x23\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x24\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x25\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x26\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x27\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x28\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x29\x1b\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x2a\x1b\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x2b\x1b\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x2c\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x2d\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x2e\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x2f\x22\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x30\x22\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x31\x22\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x33\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x34\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x35\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x36\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x37\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x38\x1b\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x39\x1b\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x3a\x1b\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x3b\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x3c\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x3d\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x3e\x22\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x3f\x22\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x40\x22\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x41\x0a\xad\x89\x80\x80\x00\x42\x8e\x80\x80\x80\x00\x00\x20\x00\xfd\x62\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x20\x00\xfd\x82\x01\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x20\x00\xfd\xa2\x01\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8e\x80\x80\x80\x00\x00\x20\x00\xfd\x63\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x20\x00\xfd\x83\x01\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x20\x00\xfd\xa3\x01\x04\x7f\x41\x01\x05\x41\x00\x0b\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\x62\x1b\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\x82\x01\x1b\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\xa2\x01\x1b\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\x63\x1b\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\x83\x01\x1b\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x00\x20\x00\xfd\xa3\x01\x1b\x0b\x9b\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\x62\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x9c\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\x82\x01\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x9c\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\xa2\x01\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x9b\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\x63\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x9c\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\x83\x01\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x9c\x80\x80\x80\x00\x01\x01\x7f\x41\x02\x21\x01\x02\x40\x41\x01\x21\x01\x20\x00\xfd\xa3\x01\x0d\x00\x41\x00\x21\x01\x0b\x20\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x62\x20\x01\xfd\x62\x71\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x82\x01\x20\x01\xfd\x82\x01\x71\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa2\x01\x20\x01\xfd\xa2\x01\x71\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x62\x20\x01\xfd\x62\x72\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x82\x01\x20\x01\xfd\x82\x01\x72\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa2\x01\x20\x01\xfd\xa2\x01\x72\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x62\x20\x01\xfd\x62\x73\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x82\x01\x20\x01\xfd\x82\x01\x73\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa2\x01\x20\x01\xfd\xa2\x01\x73\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x63\x20\x01\xfd\x63\x71\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x83\x01\x20\x01\xfd\x83\x01\x71\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa3\x01\x20\x01\xfd\xa3\x01\x71\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x63\x20\x01\xfd\x63\x72\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x83\x01\x20\x01\xfd\x83\x01\x72\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa3\x01\x20\x01\xfd\xa3\x01\x72\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\xfd\x63\x20\x01\xfd\x63\x73\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\x83\x01\x20\x01\xfd\x83\x01\x73\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\xfd\xa3\x01\x20\x01\xfd\xa3\x01\x73\x0b\x88\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\x62\x0b\x89\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\x82\x01\x0b\x89\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\xa2\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\x62\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\x82\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\xa2\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\x62\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\x82\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\xa2\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\x62\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\x82\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\xa2\x01\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\x62\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\x82\x01\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\xa2\x01\x0b\x88\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\x63\x0b\x89\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\x83\x01\x0b\x89\x80\x80\x80\x00\x00\x20\x00\xfd\x4d\xfd\xa3\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\x63\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\x83\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x4e\xfd\xa3\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\x63\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\x83\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x50\xfd\xa3\x01\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\x63\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\x83\x01\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfd\x51\xfd\xa3\x01\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\x63\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\x83\x01\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x52\xfd\xa3\x01\x0b");

// simd_boolean.wast:445
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:447
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_if_cond", [v128("65_536 65_536 65_536 65_536")]), 1)

// simd_boolean.wast:449
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_if_cond", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:452
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:454
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_if_cond", [v128("0 1 0 1")]), 1)

// simd_boolean.wast:456
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_if_cond", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:459
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:461
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_if_cond", [v128("0 0 1 0")]), 1)

// simd_boolean.wast:463
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_if_cond", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:468
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:470
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_if_cond", [v128("65_793 65_793 65_793 65_793")]), 0)

// simd_boolean.wast:472
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_if_cond", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:475
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:477
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x01\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_if_cond", [v128("65_537 1 65_537 1")]), 0)

// simd_boolean.wast:479
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_if_cond", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:482
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:484
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_if_cond", [v128("1 1 1 0")]), 0)

// simd_boolean.wast:486
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa0\x80\x80\x80\x00\x01\x02\x24\x32\x19\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_if_cond", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:490
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_select_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:492
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_select_cond", [v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:494
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_select_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:496
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_select_cond", [v128("0 0 0 1")]), 1)

// simd_boolean.wast:498
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_select_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:500
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_select_cond", [v128("0 0 1 0")]), 1)

// simd_boolean.wast:503
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_select_cond", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:505
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_select_cond", [v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 0)

// simd_boolean.wast:507
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_select_cond", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:509
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_select_cond", [v128("65_537 65_537 65_537 65_536")]), 0)

// simd_boolean.wast:511
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_select_cond", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:513
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa4\x80\x80\x80\x00\x01\x02\x24\x32\x1d\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x73\x65\x6c\x65\x63\x74\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_select_cond", [v128("1 1 0 1")]), 0)

// simd_boolean.wast:516
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_br_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:518
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_br_if_cond", [v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:520
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_br_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:522
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_br_if_cond", [v128("0 0 0 1")]), 1)

// simd_boolean.wast:524
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_br_if_cond", [v128("0 0 0 0")]), 0)

// simd_boolean.wast:526
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_br_if_cond", [v128("0 0 1 0")]), 1)

// simd_boolean.wast:529
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_br_if_cond", [v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:531
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_br_if_cond", [v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 0)

// simd_boolean.wast:533
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_br_if_cond", [v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:535
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_br_if_cond", [v128("65_537 65_537 65_537 65_536")]), 0)

// simd_boolean.wast:537
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_br_if_cond", [v128("1 1 1 1")]), 1)

// simd_boolean.wast:539
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x62\x72\x5f\x69\x66\x5f\x63\x6f\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_br_if_cond", [v128("1 1 0 1")]), 0)

// simd_boolean.wast:542
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:545
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 65_536")]), 0)

// simd_boolean.wast:548
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.and_operand", [v128("0 0 0 65_536"), v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:551
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:554
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 1")]), 0)

// simd_boolean.wast:557
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.and_operand", [v128("0 0 0 1"), v128("0 0 0 1")]), 1)

// simd_boolean.wast:560
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:563
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 1 0")]), 0)

// simd_boolean.wast:566
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.and_operand", [v128("0 0 1 0"), v128("0 0 1 0")]), 1)

// simd_boolean.wast:570
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:573
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:576
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.or_operand", [v128("0 0 0 65_536"), v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:579
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:582
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 1")]), 1)

// simd_boolean.wast:585
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.or_operand", [v128("0 0 0 1"), v128("0 0 0 1")]), 1)

// simd_boolean.wast:588
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:591
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 1 0")]), 1)

// simd_boolean.wast:594
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.or_operand", [v128("0 0 1 0"), v128("0 0 1 0")]), 1)

// simd_boolean.wast:598
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:601
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 65_536")]), 1)

// simd_boolean.wast:604
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_as_i32.xor_operand", [v128("0 0 0 65_536"), v128("0 0 0 65_536")]), 0)

// simd_boolean.wast:607
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:610
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 1")]), 1)

// simd_boolean.wast:613
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_as_i32.xor_operand", [v128("0 0 0 1"), v128("0 0 0 1")]), 0)

// simd_boolean.wast:616
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:619
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 1 0")]), 1)

// simd_boolean.wast:622
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_as_i32.xor_operand", [v128("0 0 1 0"), v128("0 0 1 0")]), 0)

// simd_boolean.wast:626
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.and_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:629
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.and_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 0)

// simd_boolean.wast:632
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:635
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.and_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:638
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.and_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_536")]), 0)

// simd_boolean.wast:641
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 0 1")]), 0)

// simd_boolean.wast:644
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.and_operand", [v128("1 1 1 1"), v128("1 1 1 1")]), 1)

// simd_boolean.wast:647
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.and_operand", [v128("1 1 1 1"), v128("1 1 0 1")]), 0)

// simd_boolean.wast:650
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x61\x6e\x64\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.and_operand", [v128("0 0 0 0"), v128("0 0 1 0")]), 0)

// simd_boolean.wast:654
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.or_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 1)

// simd_boolean.wast:657
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.or_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 1)

// simd_boolean.wast:660
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:663
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.or_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_537")]), 1)

// simd_boolean.wast:666
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.or_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_536")]), 1)

// simd_boolean.wast:669
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:672
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.or_operand", [v128("1 1 1 1"), v128("1 1 1 1")]), 1)

// simd_boolean.wast:675
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.or_operand", [v128("1 1 1 1"), v128("1 1 0 1")]), 1)

// simd_boolean.wast:678
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa7\x80\x80\x80\x00\x01\x02\x24\x32\x20\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.or_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:682
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.xor_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_843_009")]), 0)

// simd_boolean.wast:685
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xfd\x0c\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x01\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.xor_operand", [v128("16_843_009 16_843_009 16_843_009 16_843_009"), v128("16_843_009 16_843_009 16_843_009 16_777_473")]), 1)

// simd_boolean.wast:688
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:691
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.xor_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_537")]), 0)

// simd_boolean.wast:694
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xfd\x0c\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\x01\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.xor_operand", [v128("65_537 65_537 65_537 65_537"), v128("65_537 65_537 65_537 65_536")]), 1)

// simd_boolean.wast:697
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:700
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.xor_operand", [v128("1 1 1 1"), v128("1 1 1 1")]), 0)

// simd_boolean.wast:703
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xfd\x0c\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.xor_operand", [v128("1 1 1 1"), v128("1 1 0 1")]), 1)

// simd_boolean.wast:706
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa8\x80\x80\x80\x00\x01\x02\x24\x32\x21\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x61\x73\x5f\x69\x33\x32\x2e\x78\x6f\x72\x5f\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_as_i32.xor_operand", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:710
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:712
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:714
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.not", [v128("0 0 0 16_711_680")]), 1)

// simd_boolean.wast:716
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:718
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:720
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.not", [v128("0 0 0 65_535")]), 1)

// simd_boolean.wast:722
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:724
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:726
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.not", [v128("0 0 -1 0")]), 1)

// simd_boolean.wast:729
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:732
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:735
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.and", [v128("0 0 0 16_711_680"), v128("0 0 0 16_711_680")]), 1)

// simd_boolean.wast:738
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:741
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:744
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.and", [v128("0 0 0 65_535"), v128("0 0 0 65_535")]), 1)

// simd_boolean.wast:747
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:750
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:753
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.and", [v128("0 0 -1 0"), v128("0 0 -1 0")]), 1)

// simd_boolean.wast:757
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:760
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:763
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.or", [v128("0 0 0 16_711_680"), v128("0 0 0 16_711_680")]), 1)

// simd_boolean.wast:766
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:769
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:772
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.or", [v128("0 0 0 65_535"), v128("0 0 0 65_535")]), 1)

// simd_boolean.wast:775
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:778
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:781
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.or", [v128("0 0 -1 0"), v128("0 0 -1 0")]), 1)

// simd_boolean.wast:785
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:788
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:791
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 16_711_680")]), 1)

// simd_boolean.wast:794
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:797
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:800
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 65_535")]), 1)

// simd_boolean.wast:803
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:806
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:809
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 -1 0")]), 1)

// simd_boolean.wast:813
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.bitselect", [v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765")]), 0)

// simd_boolean.wast:817
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x38\x78\x31\x36\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xff\x55\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_any_true_with_v128.bitselect", [v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_442_796_885")]), 1)

// simd_boolean.wast:821
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.bitselect", [v128("11_141_290 11_141_290 11_141_290 11_141_290"), v128("5_570_645 5_570_645 5_570_645 5_570_645"), v128("5_570_645 5_570_645 5_570_645 5_570_645")]), 0)

// simd_boolean.wast:825
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x31\x36\x78\x38\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\xff\x00\x55\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_any_true_with_v128.bitselect", [v128("11_141_290 11_141_290 11_141_290 11_141_290"), v128("5_570_645 5_570_645 5_570_645 5_570_645"), v128("5_570_645 5_570_645 5_570_645 5_570_815")]), 1)

// simd_boolean.wast:829
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.bitselect", [v128("170 170 170 170"), v128("85 85 85 85"), v128("85 85 85 85")]), 0)

// simd_boolean.wast:833
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x33\x32\x78\x34\x5f\x61\x6e\x79\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\xff\x00\x00\x00\x55\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_any_true_with_v128.bitselect", [v128("170 170 170 170"), v128("85 85 85 85"), v128("85 85 255 85")]), 1)

// simd_boolean.wast:838
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:840
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:842
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.not", [v128("0 0 0 16_711_680")]), 0)

// simd_boolean.wast:844
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:846
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:848
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.not", [v128("0 0 0 65_535")]), 0)

// simd_boolean.wast:850
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.not", [v128("0 0 0 0")]), 1)

// simd_boolean.wast:852
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.not", [v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:854
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6e\x6f\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa9\x80\x80\x80\x00\x01\xa3\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.not", [v128("0 0 -1 0")]), 0)

// simd_boolean.wast:857
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:860
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:863
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.and", [v128("0 0 0 16_711_680"), v128("0 0 0 16_711_680")]), 0)

// simd_boolean.wast:866
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:869
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:872
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.and", [v128("0 0 0 65_535"), v128("0 0 0 65_535")]), 0)

// simd_boolean.wast:875
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.and", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:878
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.and", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:881
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.and", [v128("0 0 -1 0"), v128("0 0 -1 0")]), 0)

// simd_boolean.wast:885
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:888
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:891
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.or", [v128("0 0 0 16_711_680"), v128("0 0 0 16_711_680")]), 0)

// simd_boolean.wast:894
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:897
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:900
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.or", [v128("0 0 0 65_535"), v128("0 0 0 65_535")]), 0)

// simd_boolean.wast:903
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.or", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:906
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.or", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 1)

// simd_boolean.wast:909
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa2\x80\x80\x80\x00\x01\x02\x24\x32\x1b\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.or", [v128("0 0 -1 0"), v128("0 0 -1 0")]), 0)

// simd_boolean.wast:913
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:916
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:919
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\xfd\x0c\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.xor", [v128("-16_711_936 -16_711_936 -16_711_936 -16_711_936"), v128("16_711_935 16_711_935 16_711_935 16_711_935")]), 1)

// simd_boolean.wast:922
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:925
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:928
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\xfd\x0c\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.xor", [v128("-65_536 -65_536 -65_536 -65_536"), v128("65_535 65_535 65_535 65_535")]), 1)

// simd_boolean.wast:931
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.xor", [v128("0 0 0 0"), v128("0 0 0 0")]), 0)

// simd_boolean.wast:934
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.xor", [v128("-1 -1 -1 -1"), v128("-1 -1 -1 -1")]), 0)

// simd_boolean.wast:937
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7b\x7b\x01\x7f\x02\xa3\x80\x80\x80\x00\x01\x02\x24\x32\x1c\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x78\x6f\x72\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xbb\x80\x80\x80\x00\x01\xb5\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.xor", [v128("0 -1 0 -1"), v128("-1 0 -1 0")]), 1)

// simd_boolean.wast:941
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.bitselect", [v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765")]), 0)

// simd_boolean.wast:945
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x38\x78\x31\x36\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xfd\x0c\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i8x16_all_true_with_v128.bitselect", [v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766"), v128("1_431_655_765 1_431_655_765 1_431_655_765 1_431_655_765"), v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766")]), 1)

// simd_boolean.wast:949
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.bitselect", [v128("11_141_290 11_141_290 11_141_290 11_141_290"), v128("5_570_645 5_570_645 5_570_645 5_570_645"), v128("5_570_645 5_570_645 5_570_645 5_570_645")]), 0)

// simd_boolean.wast:953
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x31\x36\x78\x38\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xfd\x0c\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\x55\x00\xfd\x0c\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\xaa\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i16x8_all_true_with_v128.bitselect", [v128("11_141_290 11_141_290 11_141_290 11_141_290"), v128("5_570_645 5_570_645 5_570_645 5_570_645"), v128("11_141_290 11_141_290 11_141_290 11_141_290")]), 1)

// simd_boolean.wast:957
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x10\x00\x01\x41\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.bitselect", [v128("170 170 170 170"), v128("85 85 85 85"), v128("85 85 85 85")]), 0)

// simd_boolean.wast:961
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7b\x7b\x7b\x01\x7f\x02\xa9\x80\x80\x80\x00\x01\x02\x24\x32\x22\x69\x33\x32\x78\x34\x5f\x61\x6c\x6c\x5f\x74\x72\x75\x65\x5f\x77\x69\x74\x68\x5f\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xcd\x80\x80\x80\x00\x01\xc7\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xfd\x0c\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\x55\x00\x00\x00\xfd\x0c\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\xaa\x00\x00\x00\x10\x00\x01\x41\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$2", $2)),  "run", []));  // assert_return(() => call($2, "i32x4_all_true_with_v128.bitselect", [v128("170 170 170 170"), v128("85 85 85 85"), v128("170 170 170 170")]), 1)

// simd_boolean.wast:968
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x00\xfd\x62\x0b");

// simd_boolean.wast:969
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x00\xfd\x63\x0b");

// simd_boolean.wast:970
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\xfd\x82\x01\x0b");

// simd_boolean.wast:971
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\xfd\x83\x01\x0b");

// simd_boolean.wast:972
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\xfd\xa2\x01\x0b");

// simd_boolean.wast:973
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\xfd\xa3\x01\x0b");

// simd_boolean.wast:977
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// simd_boolean.wast:978
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// simd_boolean.wast:979
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// simd_boolean.wast:980
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// simd_boolean.wast:984
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\xfd\x62\x0b");

// simd_boolean.wast:992
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\xfd\x63\x0b");

// simd_boolean.wast:1000
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfd\x82\x01\x0b");

// simd_boolean.wast:1008
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfd\x83\x01\x0b");

// simd_boolean.wast:1016
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfd\xa2\x01\x0b");

// simd_boolean.wast:1024
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfd\xa3\x01\x0b");
